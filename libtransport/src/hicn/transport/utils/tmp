/*
 * Copyright (c) 2017 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <atomic>
#include <cstddef>

namespace utils {

/******************
 * NOTE: Single consumer single producer ring buffer
 */
template<typename Element, std::size_t Size>
class CircularFifo {
 public:
  enum { Capacity = Size + 1 };

  CircularFifo() : _tail(0), _head(0), size_(0) {}
  virtual ~CircularFifo() {}

  bool push(const Element& item); // pushByMOve?
  bool pop(Element& item);

  bool wasEmpty() const;
  bool wasFull() const;
  bool isLockFree() const;
  std::size_t size() const;

 private:
  std::size_t increment(std::size_t idx) const;
  std::atomic <std::size_t>  _tail;  // tail(input) index
  Element    _array[Capacity];
  std::atomic<std::size_t>   _head; // head(output) index
  std::atomic<std::size_t> size_;
};

template<typename Element, std::size_t Size>
bool CircularFifo<Element, Size>::push(const Element& item) {
  const auto current_tail = _tail.load(std::memory_order_relaxed);
  const auto next_tail = increment(current_tail);
  if(next_tail != _head.load(std::memory_order_acquire)) {
    _array[current_tail] = item;
    _tail.store(next_tail, std::memory_order_release);
    size_++;
    return true;
  }

  // full queue
  return false;
}

// Pop by Consumer can only update the head
// (load with relaxed, store with release)
// the tail must be accessed with at least aquire
template<typename Element, std::size_t Size>
bool CircularFifo<Element, Size>::pop(Element& item) {
  const auto current_head = _head.load(std::memory_order_relaxed);
  if(current_head == _tail.load(std::memory_order_acquire)) {
    return false; // empty queue
  }

  item = _array[current_head];
  _head.store(increment(current_head), std::memory_order_release);
  size_--;
  return true;
}

template<typename Element, std::size_t Size>
bool CircularFifo<Element, Size>::wasEmpty() const {
  // snapshot with acceptance of that this comparison operation is not atomic
  return (_head.load() == _tail.load());
}


// snapshot with acceptance that this comparison is not atomic
template<typename Element, std::size_t Size>
bool CircularFifo<Element, Size>::wasFull() const {
  const auto next_tail = increment(_tail.load()); // aquire, we dont know who call
  return (next_tail == _head.load());
}


template<typename Element, std::size_t Size>
bool CircularFifo<Element, Size>::isLockFree() const {
  return (_tail.is_lock_free() && _head.is_lock_free());
}

template<typename Element, std::size_t Size>
std::size_t CircularFifo<Element, Size>::increment(std::size_t idx) const {
  return (idx + 1) % Capacity;
}

template<typename Element, std::size_t Size>
std::size_t CircularFifo<Element, Size>::size() const {
  return size_.load(std::memory_order_relaxed);
}

}